Notes from the Diagram project

* Refactoring the tree generation.

** Separate out into three types of methods:

*** MathML parsing with parseXYZ
*** Semantic Node processing with processXYZ
*** Semantic Node building with makeXYZ

** Factory, Parser and Processor

*** Factory contains a counter a limited number of methods.
    
*** Processor is a singleton with a factory
    
*** Parser is a singleton with a factory
    
*** Each tree contains its factory.

** Predicates

*** Specialist predicates are in a separate utility class:
    sre.SemanticPred
    Basic idea is to keep all boolean methods separate for clean, smaller files.

*** They are important for some of the heuristics. 
    However, they are quite independent of the processing. Changes in predicates
    can very much influence the result of the semantic interpretation,
    processing should not so much.

    Example: How we precisely define what the (dx) of an integral is, is
    independent of finding it in a row.


** TODO Include Bra-ket heuristic.
   These are essentially the new methods in fix_bracketting branch:

*** sre.SemanticTree.prototype.processFencesNew_
*** sre.SemanticTree.prototype.processOpenNeutralFences_
*** sre.SemanticTree.prototype.processNeutralFencesNew_
*** sre.SemanticTree.prototype.combineFencesEagerly_
*** sre.SemanticTree.prototype.combineFencedContentNew_

* Fixing up the enrichment and rebuild for tables and mulit-index structures

** Intoduces explicit semantic skeleton structure
** Handling explicit content nodes in skeleton with prefix c
** Retains now role for indices in punctuation.

* Refactoring walking

** focus are generated on semantic tree nodes

** focus contains

*** primary: semantic tree

*** semantic-nodes: List of all nodes in the 

*** nodes: existing DOM nodes. Can contain null.

** Walking in general then happens on the semantic tree.

** Speech generation: if null node, then

*** try to get the node from semantic tree and

*** the speech from the rebuilt tree.

** Highlighting works on the existing nodes and potential children.

*** Recurse over children, if they do not have a DOM node until exhausted:

*** Create focus from semantic nodes together with xml structure.

* TODO

** binomial coefficient bug
** finish commenting rebuild stree
** cleanup skeleton structure
** refactor recompute speech
** change semantic node id to string!
** prefix for multi-index structures
** cache problems with context
** spaces (> normal)
** labels

* Testing ideas

** multiline equations
*** Current MathML cloud rendering 
    multiline equation line 1 a line 2 b (this is effectively ChromeVox short)
*** Partial MathSpeak rendering
    multiline equation 1st line a 2nd line b
*** Correct MathSpeak rendering
    StartLayout 1st line a 2nd line b EndLayout

* Speech Synthesis API:

  synth = speechSynthesis;
  ll = new SpeechSynthesisUtterance('hello');
  ll.voice = synth.getVoices()[1];
  synth.speak(ll);

  ll.pitch = 2;
  ll.rate = 3;


  ll = new SpeechSynthesisUtterance('<speak>I have been assigned to handle your order status request.<express-as type="Apology"> I am sorry to inform you that the items you requested are back-ordered. We apologize for the inconvenience.</express-as><express-as type="Uncertainty"> We don\'t know when those items will become available. Maybe next week but we are not sure at this time.</express-as><express-as type="GoodNews">Because we want you to be a happy customer, management has decided to give you a 50% discount! </express-as></speak>');
